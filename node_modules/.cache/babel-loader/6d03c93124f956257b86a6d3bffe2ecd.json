{"remainingRequest":"/Users/dev_r/Downloads/vue_front-master 3/node_modules/babel-loader/lib/index.js!/Users/dev_r/Downloads/vue_front-master 3/src/backend/dust_pm1.js","dependencies":[{"path":"/Users/dev_r/Downloads/vue_front-master 3/src/backend/dust_pm1.js","mtime":1588436830000},{"path":"/Users/dev_r/Downloads/vue_front-master 3/node_modules/cache-loader/dist/cjs.js","mtime":1588436830000},{"path":"/Users/dev_r/Downloads/vue_front-master 3/node_modules/babel-loader/lib/index.js","mtime":1588436830000}],"contextDependencies":[],"result":["var sql = require('./db_select_dust_pm1')();\n\nconsole.log('dust_pm1 started');\n\nfunction getData() {\n  sql.select(function (err, data) {\n    var sum = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //각 시간대별 총 합\n\n    var count = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //각 시간대별 합의 갯수\n\n    var avg = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //각 시간대별 평\n\n    var nowDate = new Date();\n    if (err) console.log(err);else {\n      //main logic\n      //1. select * from dust_1\n      //2. 해당 객체로부터 최근 12시간동안 각 시간별 평균 도출\n      //3. 그래프의 x축으로 사용할 시간 array return 함수 필요\n      //4. 그래프의 데이터를 보내줄 return 함수 필요\n      for (var index = 0; index < data.length; index++) {\n        var strArray = data[index]['checkTime'].split(':'); //14:00:00을 ':' 을 기준으로 나누어 3칸의 배열에 저장\n\n        var time = parseInt(strArray[0]); // 그중 맨 앞의 데이터만 필요(시간 정보)\n        //12 구간의 데이터로 나누어 해당 sum 배열에 저장해야한다\n        //평균 산출을 위해 count도 1 더해준\n\n        if (time < nowDate.getHours() && time >= nowDate.getHours() - 1) {\n          sum[11] += data[index]['ppm'];\n          count[11] += 1;\n        } else if (time < nowDate.getHours() - 1 && time >= nowDate.getHours() - 2) {\n          sum[10] += data[index]['ppm'];\n          count[10] += 1;\n        } else if (time < nowDate.getHours() - 2 && time >= nowDate.getHours() - 3) {\n          sum[9] += data[index]['ppm'];\n          count[9] += 1;\n        } else if (time < nowDate.getHours() - 3 && time >= nowDate.getHours() - 4) {\n          sum[8] += data[index]['ppm'];\n          count[8] += 1;\n        } else if (time < nowDate.getHours() - 4 && time >= nowDate.getHours() - 5) {\n          sum[7] += data[index]['ppm'];\n          count[7] += 1;\n        } else if (time < nowDate.getHours() - 5 && time >= nowDate.getHours() - 6) {\n          sum[6] += data[index]['ppm'];\n          count[6] += 1;\n        } else if (time < nowDate.getHours() - 6 && time >= nowDate.getHours() - 7) {\n          sum[5] += data[index]['ppm'];\n          count[5] += 1;\n        } else if (time < nowDate.getHours() - 7 && time >= nowDate.getHours() - 8) {\n          sum[4] += data[index]['ppm'];\n          count[4] += 1;\n        } else if (time < nowDate.getHours() - 8 && time >= nowDate.getHours() - 9) {\n          sum[3] += data[index]['ppm'];\n          count[3] += 1;\n        } else if (time < nowDate.getHours() - 9 && time >= nowDate.getHours() - 10) {\n          sum[2] += data[index]['ppm'];\n          count[2] += 1;\n        } else if (time < nowDate.getHours() - 10 && time >= nowDate.getHours() - 11) {\n          sum[1] += data[index]['ppm'];\n          count[1] += 1;\n        } else {\n          //(time<nowDate.getHours()-11 && time>=nowDate.getHours()-12)\n          sum[0] += data[index]['ppm'];\n          count[0] += 1;\n        }\n      }\n\n      for (var index = 0; index < sum.length; index++) {\n        avg[index] = (sum[index] / count[index]).toFixed(2); //소수점 둘째자리까지만 저장\n      }\n\n      return avg;\n    }\n    sql.pool.end(function (err) {\n      if (err) console.log(err);else {\n        console.log('Connection pool has closed');\n        console.log('dust_pm1 finished');\n      }\n    });\n  });\n}\n\nexports.getData = getData;",{"version":3,"sources":["/Users/dev_r/Downloads/vue_front-master 3/src/backend/dust_pm1.js"],"names":["sql","require","console","log","getData","select","err","data","sum","count","avg","nowDate","Date","index","length","strArray","split","time","parseInt","getHours","toFixed","pool","end","exports"],"mappings":"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","sourcesContent":["var sql = require('./db_select_dust_pm1')();\n\nconsole.log('dust_pm1 started');\n\nfunction getData() {\n    sql.select(function (err, data) {\n        var sum = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //각 시간대별 총 합\n        var count = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //각 시간대별 합의 갯수\n        var avg = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //각 시간대별 평\n        var nowDate = new Date();\n\n        if (err)\n            console.log(err);\n        else {\n            //main logic\n            //1. select * from dust_1\n            //2. 해당 객체로부터 최근 12시간동안 각 시간별 평균 도출\n            //3. 그래프의 x축으로 사용할 시간 array return 함수 필요\n            //4. 그래프의 데이터를 보내줄 return 함수 필요\n\n\n            for (var index = 0; index < data.length; index++) {\n                var strArray = data[index]['checkTime'].split(':'); //14:00:00을 ':' 을 기준으로 나누어 3칸의 배열에 저장\n                var time = parseInt(strArray[0]); // 그중 맨 앞의 데이터만 필요(시간 정보)\n                //12 구간의 데이터로 나누어 해당 sum 배열에 저장해야한다\n                //평균 산출을 위해 count도 1 더해준\n\n                if (time < nowDate.getHours() && time >= nowDate.getHours() - 1) {\n                    sum[11] += data[index]['ppm'];\n                    count[11] += 1;\n                } else if (time < nowDate.getHours() - 1 && time >= nowDate.getHours() - 2) {\n                    sum[10] += data[index]['ppm'];\n                    count[10] += 1;\n                } else if (time < nowDate.getHours() - 2 && time >= nowDate.getHours() - 3) {\n                    sum[9] += data[index]['ppm'];\n                    count[9] += 1;\n                } else if (time < nowDate.getHours() - 3 && time >= nowDate.getHours() - 4) {\n                    sum[8] += data[index]['ppm'];\n                    count[8] += 1;\n                } else if (time < nowDate.getHours() - 4 && time >= nowDate.getHours() - 5) {\n                    sum[7] += data[index]['ppm'];\n                    count[7] += 1;\n                } else if (time < nowDate.getHours() - 5 && time >= nowDate.getHours() - 6) {\n                    sum[6] += data[index]['ppm'];\n                    count[6] += 1;\n                } else if (time < nowDate.getHours() - 6 && time >= nowDate.getHours() - 7) {\n                    sum[5] += data[index]['ppm'];\n                    count[5] += 1;\n                } else if (time < nowDate.getHours() - 7 && time >= nowDate.getHours() - 8) {\n                    sum[4] += data[index]['ppm'];\n                    count[4] += 1;\n                } else if (time < nowDate.getHours() - 8 && time >= nowDate.getHours() - 9) {\n                    sum[3] += data[index]['ppm'];\n                    count[3] += 1;\n                } else if (time < nowDate.getHours() - 9 && time >= nowDate.getHours() - 10) {\n                    sum[2] += data[index]['ppm'];\n                    count[2] += 1;\n                } else if (time < nowDate.getHours() - 10 && time >= nowDate.getHours() - 11) {\n                    sum[1] += data[index]['ppm'];\n                    count[1] += 1;\n                } else { //(time<nowDate.getHours()-11 && time>=nowDate.getHours()-12)\n                    sum[0] += data[index]['ppm'];\n                    count[0] += 1;\n                }\n\n\n            }\n\n            for (var index = 0; index < sum.length; index++) {\n                avg[index] = (sum[index] / count[index]).toFixed(2); //소수점 둘째자리까지만 저장\n            }\n\n\n            return avg;\n        }\n\n        sql.pool.end(function (err) {\n            if (err)\n                console.log(err);\n            else {\n                console.log('Connection pool has closed');\n                console.log('dust_pm1 finished');\n            }\n        });\n\n    });\n\n\n}\n\n\nexports.getData = getData;\n\n"]}]}