{"remainingRequest":"/Users/dev_r/Documents/GitHub/vue_front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dev_r/Documents/GitHub/vue_front/src/pages/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/dev_r/Documents/GitHub/vue_front/src/pages/Dashboard.vue","mtime":1588883329417},{"path":"/Users/dev_r/Documents/GitHub/vue_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dev_r/Documents/GitHub/vue_front/node_modules/babel-loader/lib/index.js","mtime":1588436830000},{"path":"/Users/dev_r/Documents/GitHub/vue_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dev_r/Documents/GitHub/vue_front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <card type=\"chart\">\n                    <template slot=\"header\">\n                        <div class=\"row\">\n                            \n                            <div class=\"col-sm-6\" :class=\"isRTL ? 'text-right' : 'text-left'\">\n                                <h5 class=\"card-category\">{{$t('dashboard.totalShipments')}}</h5>\n                                <h2 class=\"card-title\">{{$t('dashboard.FineDust')}}</h2>\n                               \n                            </div>\n                            <div class=\"col-sm-6\">\n                                 <span id=\"timer\" style=\"float:right; margin-right:5px\">{{ refresh_remain }} 초 후 새로고침</span><br/>\n                                <div class=\"btn-group btn-group-toggle\"\n                                     :class=\"isRTL ? 'float-left' : 'float-right'\"\n                                     data-toggle=\"buttons\">\n                                    <label v-for=\"(option, index) in bigLineChartCategories\"\n                                           :key=\"option\"\n                                           class=\"btn btn-sm btn-primary btn-simple\"\n                                           :class=\"{active: bigLineChart.activeIndex === index}\"\n                                           :id=\"index\">\n                                        <input type=\"radio\"\n                                               @click=\"initBigChart(index)\"\n                                               name=\"options\" autocomplete=\"off\"\n                                               :checked=\"bigLineChart.activeIndex === index\">\n                                        {{option}}\n                                    </label>\n                                    \n                                </div>\n                            </div>\n                        </div>\n                    </template>\n                    <div class=\"chart-area\">\n                        <line-chart style=\"height: 100%\"\n                                    ref=\"bigChart\"\n                                    chart-id=\"big-line-chart\"\n                                    :chart-data=\"bigLineChart.chartData\"\n                                    :gradient-colors=\"bigLineChart.gradientColors\"\n                                    :gradient-stops=\"bigLineChart.gradientStops\"\n                                    :extra-options=\"bigLineChart.extraOptions\">\n                        </line-chart>\n                    </div>\n                </card>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-lg-4\" :class=\"{'text-right': isRTL}\">\n                <card type=\"chart\">\n                    <template slot=\"header\">\n                        <h5 class=\"card-category\">{{$t('dashboard.totalShipments')}}</h5>\n                        <h3 class=\"card-title\"><i class=\"tim-icons icon-heart-2 text-primary \"></i>VOC 32.22 PPM</h3>\n                    </template>\n                    <div class=\"chart-area\">\n                        <line-chart style=\"height: 100%\"\n                                    chart-id=\"purple-line-chart\"\n                                    :chart-data=\"vocLineChart.chartData\"\n                                    :gradient-colors=\"vocLineChart.gradientColors\"\n                                    :gradient-stops=\"vocLineChart.gradientStops\"\n                                    :extra-options=\"vocLineChart.extraOptions\">\n                        </line-chart>\n                    </div>\n                </card>\n            </div>\n            <div class=\"col-lg-4\" :class=\"{'text-right': isRTL}\">\n                <card type=\"chart\">\n                    <template slot=\"header\">\n                        <h5 class=\"card-category\">{{$t('dashboard.totalShipments')}}</h5>\n                        <h3 class=\"card-title\"><i class=\"tim-icons icon-heart-2 text-primary \"></i>O2 21.8%</h3>\n                    </template>\n                    <div class=\"chart-area\">\n                        <line-chart style=\"height: 100%\"\n                                    chart-id=\"purple-line-chart\"\n                                    :chart-data=\"o2LineChart.chartData\"\n                                    :gradient-colors=\"o2LineChart.gradientColors\"\n                                    :gradient-stops=\"o2LineChart.gradientStops\"\n                                    :extra-options=\"o2LineChart.extraOptions\">\n                        </line-chart>\n                    </div>\n                </card>\n            </div>\n\n            <div class=\"col-lg-4\" :class=\"{'text-right': isRTL}\">\n                <card type=\"chart\">\n                    <template slot=\"header\">\n                        <h5 class=\"card-category\">{{$t('dashboard.totalShipments')}}</h5>\n                        <h3 class=\"card-title\"><i class=\"tim-icons icon-heart-2 text-primary \"></i>CO2 1300 PPM</h3>\n                    </template>\n                    <div class=\"chart-area\">\n                        <line-chart style=\"height: 100%\"\n                                    chart-id=\"purple-line-chart\"\n                                    :chart-data=\"co2LineChart.chartData\"\n                                    :gradient-colors=\"co2LineChart.gradientColors\"\n                                    :gradient-stops=\"co2LineChart.gradientStops\"\n                                    :extra-options=\"co2LineChart.extraOptions\">\n                        </line-chart>\n                    </div>\n                </card>\n            </div>\n\n\n        </div>\n        <div class=\"row\">\n            <div class=\"col-lg-6 col-md-12\">\n                <card type=\"tasks\" :header-classes=\"{'text-right': isRTL}\">\n                    <template slot=\"header\">\n                        <h6 class=\"title d-inline\">{{$t('dashboard.tasks', {count: 5})}}</h6>\n                        <p class=\"card-category d-inline\">{{$t('dashboard.today')}}</p>\n                        <base-dropdown menu-on-right=\"\"\n                                       tag=\"div\"\n                                       title-classes=\"btn btn-link btn-icon\"\n                                       aria-label=\"Settings menu\"\n                                       :class=\"{'float-left': isRTL}\">\n                            <i slot=\"title\" class=\"tim-icons icon-settings-gear-63\"></i>\n                            <a class=\"dropdown-item\" href=\"#pablo\">{{$t('dashboard.dropdown.action')}}</a>\n                            <a class=\"dropdown-item\" href=\"#pablo\">{{$t('dashboard.dropdown.anotherAction')}}</a>\n                            <a class=\"dropdown-item\" href=\"#pablo\">{{$t('dashboard.dropdown.somethingElse')}}</a>\n                        </base-dropdown>\n                    </template>\n                    <div class=\"table-full-width table-responsive\">\n                        <task-list></task-list>\n                    </div>\n                </card>\n            </div>\n            <div class=\"col-lg-6 col-md-12\">\n                <card class=\"card\" :header-classes=\"{'text-right': isRTL}\">\n                    <h4 slot=\"header\" class=\"card-title\">{{$t('dashboard.simpleTable')}}</h4>\n                    <div class=\"table-responsive\">\n                        <user-table></user-table>\n                    </div>\n                </card>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import LineChart from '@/components/Charts/LineChart';\n    import BarChart from '@/components/Charts/BarChart';\n    import * as chartConfigs from '@/components/Charts/config';\n    import TaskList from './Dashboard/TaskList';\n    import UserTable from './Dashboard/UserTable';\n    import config from '@/config';\n\n    let init_refresh_time = 10; //자동 새로고침 시간 초기값 지정\n\n    let number = 10;\n    let indexValue = 0;                        //현재 보고 있는 탭의 index값 저장용 변수\n    let refresh_remain = init_refresh_time;    //새로고침까지 남은시간 변수\n    var refresh_set_timer;                     //새로고침 타이머 저장 변수, set과 clear 하기 위해서 필요 \n\n    let async = require('async');\n    let chartLabel = require('../backend/chartLabel'); // chart의 x축 시간 계산하여 return 해주는 모듈\n\n    let dust_1_Data = [];                       // dust_1 data 저장용 배열\n    let dust_25_Data = [];                      // dust_2.5 data 저장용 배열\n    let dust_10_Data = [];                      // dust_10 data 저장용 배열\n\n\n    //data 호출 함수화\n    function getData() {\n         dust_1_Data = [];                      // dust_1 data 저장용 배열 초기화\n         dust_25_Data = [];                     // dust_2.5 data 저장용 배열 초기화\n         dust_10_Data = [];                     // dust_10 data 저장용 배열 초기화\n\n         //await getDust1Data();\n            var db = require('../backend/db_select');\n            db.get_Con_dust('1').then((result) => {\n                if (result) {\n                    for (var i = 0; i < 12; i++)   //for문 안돌리면 undefined값이 return 됨\n                        dust_1_Data.push(result.data[i]);\n                }\n            });\n\n          db.get_Con_dust('25').then((result) => {\n            if (result) {\n              for (var i = 0; i < 12; i++)   //for문 안돌리면 undefined값이 return 됨\n                dust_25_Data.push(result.data[i]);\n            }\n\n          });\n\n          db.get_Con_dust('10').then((result) => {\n            if (result) {\n              for (var i = 0; i < 12; i++)   //for문 안돌리면 undefined값이 return 됨\n                dust_10_Data.push(result.data[i]);\n            }\n\n          });\n    }\n\n\n    export default {\n        components: {\n            LineChart,\n            BarChart,\n            TaskList,\n            UserTable\n        },\n    \n        beforeCreate(){\n            getData();                          //create 전에 axios 데이터 호출\n        },\n        beforeUpdate(){       \n            clearTimeout(refresh_set_timer);    //timer 초기화\n        },\n        updated(){\n            refresh_set_timer=setTimeout(() => {\n                if(this.refresh_remain>1){\n                    this.refresh_remain--;\n                     console.log(\"refresh timer \"+this.refresh_remain);\n                    this.bigLineChart.refresh_remain = this.refresh_remain;\n                \n                }else{                          //refresh_remain이 0이 되었을때, 차트를 새로고침\n                    /* 데이터 초기화 */\n                    getData();   \n                    console.log(\"refresh chart num=\"+indexValue);\n                    this.initBigChart(indexValue);\n                    \n                    this.bigLineChart.allData = [\n                            dust_1_Data,\n                            dust_25_Data,\n                            dust_10_Data\n                    ];\n                \n                    /* timer 초기화 */ \n                     this.refresh_remain=init_refresh_time;\n                     this.bigLineChart.refresh_remain = this.refresh_remain;\n                }                \n            },1000);\n\n        },\n\n\n        data: function () {\n\n            return {\n                refresh_remain:refresh_remain,      //refresh까지 남은 시간 data\n                bigLineChart: {\n                    allData: [\n                        dust_1_Data,\n                        dust_25_Data,\n                        dust_10_Data\n                    ],\n                    activeIndex: 0,\n                    chartData: null,\n                    extraOptions: chartConfigs.purpleChartOptions,\n                    gradientColors: config.colors.primaryGradient,\n                    gradientStops: [1, 0.4, 0],\n                    categories: []\n                },\n                vocLineChart: {\n\n                    extraOptions: chartConfigs.purpleChartOptions,\n                    chartData: {\n                        labels: chartLabel.labelRecent(6),\n                        datasets: [{\n                            label: \"Data\",\n                            fill: true,\n                            borderColor: config.colors.primary,\n                            borderWidth: 2,\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            pointBackgroundColor: config.colors.primary,\n                            pointBorderColor: 'rgba(255,255,255,0)',\n                            pointHoverBackgroundColor: config.colors.primary,\n                            pointBorderWidth: 20,\n                            pointHoverRadius: 4,\n                            pointHoverBorderWidth: 15,\n                            pointRadius: 4,\n                            data: [80, 100, 70, 80, 120, 32.22],\n                        }]\n                    },\n                    gradientColors: config.colors.primaryGradient,\n                    gradientStops: [1, 0.2, 0],\n                },\n                o2LineChart: {\n                    extraOptions: chartConfigs.purpleChartOptions,\n                    chartData: {\n                        labels: chartLabel.labelRecent(6),\n                        datasets: [{\n                            label: \"Data\",\n                            fill: true,\n                            borderColor: config.colors.primary,\n                            borderWidth: 2,\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            pointBackgroundColor: config.colors.primary,\n                            pointBorderColor: 'rgba(255,255,255,0)',\n                            pointHoverBackgroundColor: config.colors.primary,\n                            pointBorderWidth: 20,\n                            pointHoverRadius: 4,\n                            pointHoverBorderWidth: 15,\n                            pointRadius: 4,\n                            data: [100, 20, 40, 50, 20, 21.8],\n                        }]\n                    },\n                    gradientColors: config.colors.primaryGradient,\n                    gradientStops: [1, 0.2, 0],\n                },\n                co2LineChart: {\n                    extraOptions: chartConfigs.purpleChartOptions,\n                    chartData: {\n                        labels: chartLabel.labelRecent(6),\n                        datasets: [{\n                            label: \"Data\",\n                            fill: true,\n                            borderColor: config.colors.primary,\n                            borderWidth: 2,\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            pointBackgroundColor: config.colors.primary,\n                            pointBorderColor: 'rgba(255,255,255,0)',\n                            pointHoverBackgroundColor: config.colors.primary,\n                            pointBorderWidth: 20,\n                            pointHoverRadius: 4,\n                            pointHoverBorderWidth: 15,\n                            pointRadius: 4,\n                            data: [10, 20, 80, 70, 30, 13],\n                        }]\n                    },\n                    gradientColors: config.colors.primaryGradient,\n                    gradientStops: [1, 0.2, 0],\n                },\n                purpleLineChart: {\n                    extraOptions: chartConfigs.purpleChartOptions,\n                    chartData: {\n                        labels: ['10시', '11시', '12시', '13시', '14시', '15시'],\n                        datasets: [{\n                            label: \"Data\",\n                            fill: true,\n                            borderColor: config.colors.primary,\n                            borderWidth: 2,\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            pointBackgroundColor: config.colors.primary,\n                            pointBorderColor: 'rgba(255,255,255,0)',\n                            pointHoverBackgroundColor: config.colors.primary,\n                            pointBorderWidth: 20,\n                            pointHoverRadius: 4,\n                            pointHoverBorderWidth: 15,\n                            pointRadius: 4,\n                            data: [80, 100, 70, 80, 120, 80],\n                        }]\n                    },\n                    gradientColors: config.colors.primaryGradient,\n                    gradientStops: [1, 0.2, 0],\n                },\n                greenLineChart: {\n                    extraOptions: chartConfigs.greenChartOptions,\n                    chartData: {\n                        labels: ['JUL', 'AUG', 'SEP', 'OCT', 'NOV'],\n                        datasets: [{\n                            label: \"My First dataset\",\n                            fill: true,\n                            borderColor: config.colors.danger,\n                            borderWidth: 2,\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            pointBackgroundColor: config.colors.danger,\n                            pointBorderColor: 'rgba(255,255,255,0)',\n                            pointHoverBackgroundColor: config.colors.danger,\n                            pointBorderWidth: 20,\n                            pointHoverRadius: 4,\n                            pointHoverBorderWidth: 15,\n                            pointRadius: 4,\n                            data: [90, 27, 60, 12, 80],\n                        }]\n                    },\n                    gradientColors: ['rgba(66,134,121,0.15)', 'rgba(66,134,121,0.0)', 'rgba(66,134,121,0)'],\n                    gradientStops: [1, 0.4, 0],\n                },\n                blueBarChart: {\n                    extraOptions: chartConfigs.barChartOptions,\n                    chartData: {\n                        labels: ['USA', 'GER', 'AUS', 'UK', 'RO', 'BR'],\n                        datasets: [{\n                            label: \"Countries\",\n                            fill: true,\n                            borderColor: config.colors.info,\n                            borderWidth: 2,\n                            borderDash: [],\n                            borderDashOffset: 0.0,\n                            data: [53, 20, 10, 80, 100, 45],\n                        }]\n                    },\n                    gradientColors: config.colors.primaryGradient,\n                    gradientStops: [1, 0.4, 0],\n                }\n            }\n        },\n\n        computed: {\n            enableRTL() {\n                return this.$route.query.enableRTL;\n            },\n            isRTL() {\n                return this.$rtl.isRTL;\n            },\n            bigLineChartCategories() {\n                return this.$t('dashboard.chartCategories');\n            }\n        },\n        methods: {\n            initBigChart(index) {\n\n                let chartData = {\n                    datasets: [{\n                        fill: true,\n                        borderColor: config.colors.primary,\n                        borderWidth: 2,\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        pointBackgroundColor: config.colors.primary,\n                        pointBorderColor: 'rgba(255,255,255,0)',\n                        pointHoverBackgroundColor: config.colors.primary,\n                        pointBorderWidth: 20,\n                        pointHoverRadius: 4,\n                        pointHoverBorderWidth: 15,\n                        pointRadius: 4,\n                        data: this.bigLineChart.allData[index]\n                    }],\n                    labels: chartLabel.labelRecent(12),\n                }\n                this.$refs.bigChart.updateGradients(chartData);\n                this.bigLineChart.chartData = chartData;\n                this.bigLineChart.activeIndex = index;\n\n                indexValue = index;                                     //현재 누른 index 값을 전역 변수에 저장\n                this.refresh_remain = init_refresh_time;                //refresh_remain에 초기값 init_refresh_time 저장\n                this.bigLineChart.refresh_remain=this.refresh_remain;   //index 값이 바뀌면 새로고침 타이머도 초기화\n\n            },\n\n            refreshChart(index) {\n                setTimeout(() => {\n                    console.log(\"refresh chart\");\n                    this.initBigChart(index);\n                }, 400);                                                //400밀리초 뒤에 chart refresh\n            }\n\n        },\n        mounted() {\n            this.i18n = this.$i18n;\n            if (this.enableRTL) {\n                this.i18n.locale = 'ar';\n                this.$rtl.enableRTL();\n            }\n            //this.initBigChart(0);\n            this.refreshChart(0);\n\n        },\n        beforeDestroy() {\n            //console.log(\"timer멈춤\");\n            clearTimeout(timer);\n            if (this.$rtl.isRTL) {\n                this.i18n.locale = 'en';\n                this.$rtl.disableRTL();\n            }\n        }\n    };\n\n</script>\n<style>\n</style>\n"]}]}